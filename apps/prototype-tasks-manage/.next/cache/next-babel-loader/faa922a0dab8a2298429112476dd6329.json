{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n/* --- Local --- */\n\nimport { boardsQuery, CONVERSATION_CREATED } from \"../lib/graphql/queries\";\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\n\nexport const useMondayBoardsQuery = ({\n  limit,\n  page\n}) => {\n  const [parsed, setParsed] = React.useState([]);\n  const [subscription, setSubscription] = React.useState();\n  const {\n    loading,\n    error,\n    data,\n    refetch,\n    subscribeToMore\n  } = useQuery(boardsQuery, {\n    variables: {\n      limit: 10,\n      page\n    }\n  });\n\n  const concat = (list, input) => {\n    return list.concat(input);\n  };\n\n  React.useEffect(() => {\n    if (subscription) {\n      setSubscription(undefined);\n      setParsed(concat(parsed, subscription));\n    }\n  }, [subscription]);\n  React.useEffect(() => {\n    subscribeToMore({\n      document: CONVERSATION_CREATED,\n      updateQuery: (previousResult, _ref) => {\n        let {\n          subscriptionData\n        } = _ref,\n            rest = _objectWithoutProperties(_ref, [\"subscriptionData\"]);\n\n        console.log(subscriptionData, \"subscriptionData\");\n\n        if (!subscriptionData.data) {\n          return previousResult;\n        }\n\n        const {\n          eventCreated\n        } = subscriptionData.data;\n\n        if (eventCreated.event) {\n          setSubscription(eventCreated.event);\n        }\n      }\n    });\n  }, [subscribeToMore]);\n  React.useMemo(() => {\n    if (data && Array.isArray(data.eventList)) {\n      const l = data.eventList.map(d => {\n        let i = {};\n        Object.keys(d).forEach(k => {\n          if (k === \"event_abi\" || k === \"raw_event\" || k === \"json_event\") {\n            i[k] = JSON.parse(d[k]);\n          } else {\n            i[k] = d[k];\n          }\n        });\n        return i;\n      });\n      setParsed(l);\n    }\n  }, [data]);\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch\n  };\n};\nexport default useMondayBoardsQuery;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday/src/hooks/useMondayBoardsQuery.js"],"names":["React","useQuery","boardsQuery","CONVERSATION_CREATED","useMondayBoardsQuery","limit","page","parsed","setParsed","useState","subscription","setSubscription","loading","error","data","refetch","subscribeToMore","variables","concat","list","input","useEffect","undefined","document","updateQuery","previousResult","subscriptionData","rest","console","log","eventCreated","event","useMemo","Array","isArray","eventList","l","map","d","i","Object","keys","forEach","k","JSON","parse"],"mappings":"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","sourcesContent":["/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n\n/* --- Local --- */\nimport { boardsQuery, CONVERSATION_CREATED } from \"../lib/graphql/queries\";\n\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\nexport const useMondayBoardsQuery = ({ limit, page }) => {\n  const [parsed, setParsed] = React.useState([]);\n  const [subscription, setSubscription] = React.useState();\n  const { loading, error, data, refetch, subscribeToMore } = useQuery(\n    boardsQuery,\n    {\n      variables: {\n        limit: 10,\n        page,\n      },\n    }\n  );\n\n  const concat = (list, input) => {\n    return list.concat(input);\n  };\n  React.useEffect(() => {\n    if (subscription) {\n      setSubscription(undefined);\n      setParsed(concat(parsed, subscription));\n    }\n  }, [subscription]);\n\n  React.useEffect(() => {\n    subscribeToMore({\n      document: CONVERSATION_CREATED,\n      updateQuery: (previousResult, { subscriptionData, ...rest }) => {\n        console.log(subscriptionData, \"subscriptionData\");\n        if (!subscriptionData.data) {\n          return previousResult;\n        }\n        const { eventCreated } = subscriptionData.data;\n        if (eventCreated.event) {\n          setSubscription(eventCreated.event);\n        }\n      },\n    });\n  }, [subscribeToMore]);\n\n  React.useMemo(() => {\n    if (data && Array.isArray(data.eventList)) {\n      const l = data.eventList.map((d) => {\n        let i = {};\n        Object.keys(d).forEach((k) => {\n          if (k === \"event_abi\" || k === \"raw_event\" || k === \"json_event\") {\n            i[k] = JSON.parse(d[k]);\n          } else {\n            i[k] = d[k];\n          }\n        });\n        return i;\n      });\n      setParsed(l);\n    }\n  }, [data]);\n\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch,\n  };\n};\n\nexport default useMondayBoardsQuery;\n"]},"metadata":{},"sourceType":"module"}