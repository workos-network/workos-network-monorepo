{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday-ui/src/ItemsTable.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useRowSelect } from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { useItemsQuery, withMonday } from \"react-monday\";\nimport Atom from \"./Atoms\";\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-radius: 6px;\n    background: #fff;\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th {\n      :nth-of-type(1) {\n        width: 20px;\n      }\n      :nth-of-type(2) {\n        width: 20px;\n      }\n      :nth-of-type(3) {\n        width: 50%;\n      }\n      :nth-of-type(4) {\n        width: 100px;\n      }\n      :nth-of-type(5) {\n        width: 100px;\n      }\n      :nth-of-type(6) {\n        width: 100px;\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    td {\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`; // Create an editable cell renderer\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData,\n  // This is a custom function that we supplied to our table instance\n  editable\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n  return __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 10\n    }\n  }, value);\n}; // Define a default UI for filtering\n\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || \"\",\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return __jsx(\"select\", {\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"All\"), options.map((option, i) => __jsx(\"option\", {\n    key: i,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, option)));\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\nfunction SliderColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    type: \"range\",\n    min: min,\n    max: max,\n    value: filterValue || min,\n    onChange: e => {\n      setFilter(parseInt(e.target.value, 10));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: () => setFilter(undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, \"Off\"));\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\nfunction NumberRangeColumnFilter({\n  column: {\n    filterValue = [],\n    preFilteredRows,\n    setFilter,\n    id\n  }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    value: filterValue[0] || \"\",\n    type: \"number\",\n    onChange: e => {\n      const val = e.target.value;\n      setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n    },\n    placeholder: `Min (${min})`,\n    style: {\n      width: \"70px\",\n      marginRight: \"0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), \"to\", __jsx(\"input\", {\n    value: filterValue[1] || \"\",\n    type: \"number\",\n    onChange: e => {\n      const val = e.target.value;\n      setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n    },\n    placeholder: `Max (${max})`,\n    style: {\n      width: \"70px\",\n      marginLeft: \"0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Be sure to pass our updateMyData and the skipReset option\n\n\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  renderRowSubComponent,\n  skipReset\n}) {\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter // And also our default editable cell\n    // Cell: EditableCell,\n\n  }), []); // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    visibleColumns,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    autoResetPage: !skipReset,\n    autoResetSelectedRows: !skipReset,\n    disableMultiSort: true\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, // Here we will use a plugin to add our selection column\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: \"selection\",\n        groupByBoundary: true,\n        Header: ({\n          getToggleAllRowsSelectedProps\n        }) => __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }\n        }, __jsx(IndeterminateCheckbox, _extends({}, getToggleAllRowsSelectedProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 17\n          }\n        }))),\n        Cell: ({\n          row\n        }) => __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }\n        }, __jsx(IndeterminateCheckbox, _extends({}, row.getToggleRowSelectedProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }\n        })))\n      }, ...columns];\n    });\n  }); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  }), __jsx(Atom.Flex, {\n    alignCenter: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 21\n    }\n  }, __jsx(\"span\", _extends({}, column.getSortByToggleProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 23\n    }\n  }), column.render(\"Header\"), column.isSorted ? column.isSortedDesc ? \" 🔽\" : \" 🔼\" : \"\")), __jsx(Atom.Box, {\n    sx: {\n      ml: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 21\n    }\n  }, column.canFilter ? column.render(\"Filter\") : null))))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }), page.map(row => {\n    prepareRow(row);\n    console.log(row, \"rowrow\");\n    return __jsx(React.Fragment, null, __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 23\n        }\n      }), cell.isGrouped ? __jsx(React.Fragment, null, __jsx(\"span\", _extends({}, row.getToggleRowExpandedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 29\n        }\n      }), row.isExpanded ? \"👇\" : \"👉\"), \" \", cell.render(\"Cell\", {\n        editable: false\n      }), \" (\", row.subRows.length, \")\") : cell.isAggregated ? cell.render(\"Aggregated\") : cell.isPlaceholder ? null : cell.render(\"Cell\", {\n        editable: true\n      }));\n    })), row.isExpanded ? __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 19\n      }\n    }, __jsx(\"td\", {\n      colSpan: visibleColumns.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 21\n      }\n    }, renderRowSubComponent({\n      row\n    }))) : null);\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }, \"<<\"), \" \", __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  }, \"<\"), \" \", __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }\n  }, \">\"), \" \", __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }\n  }, \">>\"), \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }\n  }, \"Page\", \" \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), \" \"), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", \" \", __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: \"100px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 11\n    }\n  })), \" \", __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n} // Define a custom filter filter function!\n\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = val => typeof val !== \"number\"; // This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\n\n\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n  leafValues.forEach(value => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n  return Math.round((min + max) / 2);\n}\n\nconst IndeterminateCheckbox = React.forwardRef((_ref, ref) => {\n  let {\n    indeterminate\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"indeterminate\"]);\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return __jsx(React.Fragment, null, __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    ref: resolvedRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 9\n    }\n  })));\n});\n\nfunction ItemsTable() {\n  const columns = React.useMemo(() => [{\n    Header: \"Tasks\",\n    columns: [{\n      id: \"expander\",\n      Header: ({\n        getToggleAllRowsExpandedProps,\n        isAllRowsExpanded\n      }) => __jsx(\"span\", _extends({}, getToggleAllRowsExpandedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 15\n        }\n      }), isAllRowsExpanded ? \"👇\" : \"👉\"),\n      Cell: ({\n        row\n      }) => __jsx(\"span\", _extends({}, row.getToggleRowExpandedProps({\n        style: {\n          paddingLeft: `${row.depth * 2}rem`\n        }\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 15\n        }\n      }), row.isExpanded ? \"👇\" : \"👉\")\n    }, {\n      Header: \"Task\",\n      accessor: \"name\",\n      aggregate: \"count\"\n    }, {\n      Header: \"Date\",\n      accessor: \"created_at\",\n      Filter: SelectColumnFilter,\n      filter: \"includes\"\n    }, {\n      Header: \"Board\",\n      accessor: \"board.name\",\n      aggregate: \"count\"\n    }, {\n      Header: \"Columns\",\n      accessor: \"column_values\",\n      aggregate: \"count\",\n      Cell: p => __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 26\n        }\n      }, p.value.length)\n    }]\n  }], []); // const {data, refetch} = useItemsQuery({});\n  // console.log(data);\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  const skipResetRef = React.useRef(false); // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true;\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, row), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  };\n\n  const [data, dataSet] = React.useState([]);\n  const monday = withMonday([]);\n  const items = useItemsQuery({});\n  React.useEffect(() => {\n    items.request({\n      limit: 35\n    });\n  }, []);\n  React.useEffect(() => {\n    if (Array.isArray(items.data)) dataSet(items.data);\n    console.log(items.data, \"items.data\");\n  }, [items.data]); // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n  React.useEffect(() => {\n    skipResetRef.current = false;\n  }, [data]); // Create a function that will render our row sub components\n\n  const renderRowSubComponent = React.useCallback(({\n    row\n  }) => __jsx(\"pre\", {\n    style: {\n      fontSize: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    values: row.values\n  }, null, 2))), []);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    skipReset: skipResetRef.current,\n    renderRowSubComponent: renderRowSubComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ItemsTable;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday-ui/src/ItemsTable.jsx"],"names":["React","styled","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useRowSelect","matchSorter","useItemsQuery","withMonday","Atom","Styles","div","EditableCell","value","initialValue","row","index","column","id","updateMyData","editable","setValue","useState","DefaultColumnFilter","filterValue","preFilteredRows","setFilter","count","length","e","target","undefined","SelectColumnFilter","options","useMemo","Set","forEach","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","keys","autoRemove","Table","columns","data","renderRowSubComponent","skipReset","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","visibleColumns","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","autoResetPage","autoResetSelectedRows","disableMultiSort","hooks","push","groupByBoundary","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","ml","canFilter","console","log","getRowProps","cells","cell","getCellProps","isGrouped","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","Number","filterGreaterThan","roundedMedian","leafValues","round","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","ItemsTable","getToggleAllRowsExpandedProps","isAllRowsExpanded","style","paddingLeft","depth","accessor","aggregate","p","skipResetRef","rowIndex","columnId","setData","dataSet","monday","items","request","limit","Array","isArray","useCallback","fontSize","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { useItemsQuery, withMonday } from \"react-monday\";\n\nimport Atom from \"./Atoms\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-radius: 6px;\n    background: #fff;\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th {\n      :nth-of-type(1) {\n        width: 20px;\n      }\n      :nth-of-type(2) {\n        width: 20px;\n      }\n      :nth-of-type(3) {\n        width: 50%;\n      }\n      :nth-of-type(4) {\n        width: 100px;\n      }\n      :nth-of-type(5) {\n        width: 100px;\n      }\n      :nth-of-type(6) {\n        width: 100px;\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    td {\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`;\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData, // This is a custom function that we supplied to our table instance\n  editable,\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  return <span>{value}</span>;\n};\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\",\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\",\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Be sure to pass our updateMyData and the skipReset option\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  renderRowSubComponent,\n  skipReset,\n}) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      // And also our default editable cell\n      // Cell: EditableCell,\n    }),\n    []\n  );\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    visibleColumns,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      autoResetPage: !skipReset,\n      autoResetSelectedRows: !skipReset,\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: \"selection\",\n            groupByBoundary: true,\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ];\n      });\n    }\n  );\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        {/* \n        ------------\n        Table Head \n        ------------\n        */}\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <Atom.Flex alignCenter>\n                    <div>\n                      {/* {column.canGroupBy ? (\n                        // If the column can be grouped, let's add a toggle\n                        <span {...column.getGroupByToggleProps()}>\n                          {column.isGrouped ? '🛑 ' : '👊 '}\n                        </span>\n                      ) : null} */}\n                      <span {...column.getSortByToggleProps()}>\n                        {column.render(\"Header\")}\n                        {/* Add a sort direction indicator */}\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? \" 🔽\"\n                            : \" 🔼\"\n                          : \"\"}\n                      </span>\n                    </div>\n                    <Atom.Box sx={{ ml: 3 }}>\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </Atom.Box>\n                  </Atom.Flex>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        {/* \n        ------------\n        Table Body \n        ------------\n        */}\n        <tbody {...getTableBodyProps()}>\n          {page.map((row) => {\n            prepareRow(row);\n            console.log(row, \"rowrow\");\n            return (\n              <>\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>\n                        {cell.isGrouped ? (\n                          <>\n                            <span {...row.getToggleRowExpandedProps()}>\n                              {row.isExpanded ? \"👇\" : \"👉\"}\n                            </span>{\" \"}\n                            {cell.render(\"Cell\", { editable: false })} (\n                            {row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : (\n                          cell.render(\"Cell\", { editable: true })\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n                {row.isExpanded ? (\n                  <tr>\n                    <td colSpan={visibleColumns.length}>\n                      {renderRowSubComponent({ row })}\n                    </td>\n                  </tr>\n                ) : null}\n              </>\n            );\n          })}\n        </tbody>\n      </table>\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\n// This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n\n  leafValues.forEach((value) => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n\n  return Math.round((min + max) / 2);\n}\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n\nfunction ItemsTable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Tasks\",\n        columns: [\n          {\n            id: \"expander\",\n            Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n              <span {...getToggleAllRowsExpandedProps()}>\n                {isAllRowsExpanded ? \"👇\" : \"👉\"}\n              </span>\n            ),\n            Cell: ({ row }) => (\n              <span\n                {...row.getToggleRowExpandedProps({\n                  style: {\n                    paddingLeft: `${row.depth * 2}rem`,\n                  },\n                })}\n              >\n                {row.isExpanded ? \"👇\" : \"👉\"}\n              </span>\n            ),\n          },\n          {\n            Header: \"Task\",\n            accessor: \"name\",\n            aggregate: \"count\",\n          },\n          {\n            Header: \"Date\",\n            accessor: \"created_at\",\n            Filter: SelectColumnFilter,\n            filter: \"includes\",\n          },\n          {\n            Header: \"Board\",\n            accessor: \"board.name\",\n            aggregate: \"count\",\n          },\n          {\n            Header: \"Columns\",\n            accessor: \"column_values\",\n            aggregate: \"count\",\n            Cell: (p) => <span>{p.value.length}</span>,\n          },\n        ],\n      },\n    ],\n    []\n  );\n\n  // const {data, refetch} = useItemsQuery({});\n\n  // console.log(data);\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  const skipResetRef = React.useRef(false);\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true;\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...row,\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n\n  const [data, dataSet] = React.useState([]);\n  const monday = withMonday([]);\n  const items = useItemsQuery({});\n  React.useEffect(() => {\n    items.request({ limit: 35 });\n  }, []);\n\n  React.useEffect(() => {\n    if (Array.isArray(items.data)) dataSet(items.data);\n    console.log(items.data, \"items.data\");\n  }, [items.data]);\n\n  // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    skipResetRef.current = false;\n  }, [data]);\n\n  // Create a function that will render our row sub components\n  const renderRowSubComponent = React.useCallback(\n    ({ row }) => (\n      <pre\n        style={{\n          fontSize: \"10px\",\n        }}\n      >\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    ),\n    []\n  );\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipReset={skipResetRef.current}\n        renderRowSubComponent={renderRowSubComponent}\n      />\n    </Styles>\n  );\n}\n\nexport default ItemsTable;\n"]},"metadata":{},"sourceType":"module"}