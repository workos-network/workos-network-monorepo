{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* --- Global --- */\nimport React, { useReducer } from \"react\";\nimport withMonday from \"../withContext\";\nimport { ITEMS_QUERY } from \"../lib/graphql\";\nexport var ITEMS_QUERY_REQUEST = \"ITEMS_QUERY_REQUEST\";\nexport var ITEMS_QUERY_SUCCESS = \"ITEMS_QUERY_SUCCESS\";\nexport var ITEMS_QUERY_FAILURE = \"ITEMS_QUERY_FAILURE\";\n/**\n * @name useItemsQuery\n * @param {Integer} limit\n * @param {Integer} page\n */\n\nexport var useItemsQuery = function useItemsQuery(_ref) {\n  var limit = _ref.limit,\n      page = _ref.page;\n  var monday = withMonday();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      Set = _React$useState2[1];\n\n  var initialState = {\n    data: undefined,\n    error: undefined,\n    loading: false\n  };\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case ITEMS_QUERY_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true\n        });\n\n      case ITEMS_QUERY_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      case ITEMS_QUERY_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: action.payload\n        });\n\n      default:\n        throw new Error();\n    }\n  }\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n  /* ------------------- */\n  // Actions\n\n  /* ------------------- */\n\n\n  React.useEffect(function (inputs) {\n    if (state.loading) {\n      console.log(\"requesting\");\n\n      if (monday.client && monday.isClientAuthorized) {\n        monday.client.request({\n          query: ITEMS_QUERY,\n          variables: {\n            limit: 35 // page: inputs.page\n\n          }\n        }).then(function (_ref2) {\n          var data = _ref2.data,\n              error = _ref2.error;\n          dispatch({\n            type: ITEMS_QUERY_SUCCESS,\n            payload: {\n              data: data.items,\n              error: error\n            }\n          });\n        })[\"catch\"](function (_ref3) {\n          var data = _ref3.data,\n              error = _ref3.error;\n          console.log(data, error, \"data, error\");\n          dispatch({\n            type: ITEMS_QUERY_FAILURE,\n            payload: error\n          });\n        });\n      }\n    }\n  }, [state.loading, monday.client, monday.isClientAuthorized]);\n\n  var request = function request(inputs) {\n    return dispatch({\n      type: ITEMS_QUERY_REQUEST,\n      payload: inputs\n    });\n  }; // const { loading, error, data, refetch, subscribeToMore } = useQuery(\n  //   ITEMS_QUERY,\n  //   {\n  //     variables: {\n  //       limit: 30,\n  //       page: 1\n  //     }\n  //   }\n  // );\n\n\n  return {\n    request: request,\n    data: state.data,\n    loading: state.loading,\n    error: state.error,\n    refetch: request\n  };\n};\nexport default useItemsQuery;","map":null,"metadata":{},"sourceType":"module"}