{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday-ui/src/ItemsTable.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-radius: 6px;\\n    background: #fff;\\n    border-spacing: 0;\\n    border: 1px solid black;\\n    width: 100%;\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th {\\n      :nth-of-type(1) {\\n        width: 20px;\\n      }\\n      :nth-of-type(2) {\\n        width: 20px;\\n      }\\n      :nth-of-type(3) {\\n        width: 50%;\\n      }\\n      :nth-of-type(4) {\\n        width: 100px;\\n      }\\n      :nth-of-type(5) {\\n        width: 100px;\\n      }\\n      :nth-of-type(6) {\\n        width: 100px;\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n    }\\n\\n    td {\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n  }\\n\\n  .pagination {\\n    padding: 0.5rem;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useRowSelect } from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { useItemsQuery, withMonday } from \"react-monday\";\nimport Atom from \"./Atoms\";\nvar Styles = styled.div(_templateObject()); // Create an editable cell renderer\n\n_c = Styles;\n\nvar EditableCell = function EditableCell(_ref) {\n  _s();\n\n  var initialValue = _ref.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateMyData = _ref.updateMyData,\n      editable = _ref.editable;\n\n  // We need to keep and update the state of the cell normally\n  var _React$useState = React.useState(initialValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 10\n    }\n  }, value);\n}; // Define a default UI for filtering\n\n\n_s(EditableCell, \"L08zUdRTae9t+nWvf9xbU6NcRrM=\");\n\n_c2 = EditableCell;\n\nfunction DefaultColumnFilter(_ref2) {\n  var _ref2$column = _ref2.column,\n      filterValue = _ref2$column.filterValue,\n      preFilteredRows = _ref2$column.preFilteredRows,\n      setFilter = _ref2$column.setFilter;\n  var count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || \"\",\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c3 = DefaultColumnFilter;\n\nfunction SelectColumnFilter(_ref3) {\n  _s2();\n\n  var _this2 = this;\n\n  var _ref3$column = _ref3.column,\n      filterValue = _ref3$column.filterValue,\n      setFilter = _ref3$column.setFilter,\n      preFilteredRows = _ref3$column.preFilteredRows,\n      id = _ref3$column.id;\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  var options = React.useMemo(function () {\n    var options = new Set();\n    preFilteredRows.forEach(function (row) {\n      options.add(row.values[id]);\n    });\n    return _toConsumableArray(options.values());\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return __jsx(\"select\", {\n    value: filterValue,\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"All\"), options.map(function (option, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: option,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, option);\n  }));\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\n_s2(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c4 = SelectColumnFilter;\n\nfunction SliderColumnFilter(_ref4) {\n  _s3();\n\n  var _ref4$column = _ref4.column,\n      filterValue = _ref4$column.filterValue,\n      setFilter = _ref4$column.setFilter,\n      preFilteredRows = _ref4$column.preFilteredRows,\n      id = _ref4$column.id;\n\n  // Calculate the min and max\n  // using the preFilteredRows\n  var _React$useMemo = React.useMemo(function () {\n    var min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    var max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(function (row) {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      min = _React$useMemo2[0],\n      max = _React$useMemo2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    type: \"range\",\n    min: min,\n    max: max,\n    value: filterValue || min,\n    onChange: function onChange(e) {\n      setFilter(parseInt(e.target.value, 10));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setFilter(undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, \"Off\"));\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\n_s3(SliderColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c5 = SliderColumnFilter;\n\nfunction NumberRangeColumnFilter(_ref5) {\n  _s4();\n\n  var _ref5$column = _ref5.column,\n      _ref5$column$filterVa = _ref5$column.filterValue,\n      filterValue = _ref5$column$filterVa === void 0 ? [] : _ref5$column$filterVa,\n      preFilteredRows = _ref5$column.preFilteredRows,\n      setFilter = _ref5$column.setFilter,\n      id = _ref5$column.id;\n\n  var _React$useMemo3 = React.useMemo(function () {\n    var min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    var max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(function (row) {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]),\n      _React$useMemo4 = _slicedToArray(_React$useMemo3, 2),\n      min = _React$useMemo4[0],\n      max = _React$useMemo4[1];\n\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    value: filterValue[0] || \"\",\n    type: \"number\",\n    onChange: function onChange(e) {\n      var val = e.target.value;\n      setFilter(function () {\n        var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return [val ? parseInt(val, 10) : undefined, old[1]];\n      });\n    },\n    placeholder: \"Min (\".concat(min, \")\"),\n    style: {\n      width: \"70px\",\n      marginRight: \"0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), \"to\", __jsx(\"input\", {\n    value: filterValue[1] || \"\",\n    type: \"number\",\n    onChange: function onChange(e) {\n      var val = e.target.value;\n      setFilter(function () {\n        var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return [old[0], val ? parseInt(val, 10) : undefined];\n      });\n    },\n    placeholder: \"Max (\".concat(max, \")\"),\n    style: {\n      width: \"70px\",\n      marginLeft: \"0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s4(NumberRangeColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c6 = NumberRangeColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Be sure to pass our updateMyData and the skipReset option\n\n\nfunction Table(_ref6) {\n  _s5();\n\n  var _this3 = this;\n\n  var columns = _ref6.columns,\n      data = _ref6.data,\n      updateMyData = _ref6.updateMyData,\n      renderRowSubComponent = _ref6.renderRowSubComponent,\n      skipReset = _ref6.skipReset;\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter // And also our default editable cell\n      // Cell: EditableCell,\n\n    };\n  }, []); // Use the state and functions returned from useTable to build your UI\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    filterTypes: filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    autoResetPage: !skipReset,\n    autoResetSelectedRows: !skipReset,\n    disableMultiSort: true\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, // Here we will use a plugin to add our selection column\n  function (hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [{\n        id: \"selection\",\n        groupByBoundary: true,\n        Header: function Header(_ref7) {\n          var getToggleAllRowsSelectedProps = _ref7.getToggleAllRowsSelectedProps;\n          return __jsx(\"div\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }\n          }, __jsx(IndeterminateCheckbox, _extends({}, getToggleAllRowsSelectedProps(), {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }\n          })));\n        },\n        Cell: function Cell(_ref8) {\n          var row = _ref8.row;\n          return __jsx(\"div\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }\n          }, __jsx(IndeterminateCheckbox, _extends({}, row.getToggleRowSelectedProps(), {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }\n          })));\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      visibleColumns = _useTable.visibleColumns,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize,\n      sortBy = _useTable$state.sortBy,\n      groupBy = _useTable$state.groupBy,\n      expanded = _useTable$state.expanded,\n      filters = _useTable$state.filters,\n      selectedRowIds = _useTable$state.selectedRowIds; // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 17\n        }\n      }), __jsx(Atom.Flex, {\n        alignCenter: true,\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 19\n        }\n      }, __jsx(\"div\", {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }\n      }, __jsx(\"span\", _extends({}, column.getSortByToggleProps(), {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 23\n        }\n      }), column.render(\"Header\"), column.isSorted ? column.isSortedDesc ? \" 🔽\" : \" 🔼\" : \"\")), __jsx(Atom.Box, {\n        sx: {\n          ml: 3\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }\n      }, column.canFilter ? column.render(\"Filter\") : null)));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }), page.map(function (row) {\n    prepareRow(row);\n    console.log(row, \"rowrow\");\n    return __jsx(React.Fragment, null, __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 23\n        }\n      }), cell.isGrouped ? __jsx(React.Fragment, null, __jsx(\"span\", _extends({}, row.getToggleRowExpandedProps(), {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 29\n        }\n      }), row.isExpanded ? \"👇\" : \"👉\"), \" \", cell.render(\"Cell\", {\n        editable: false\n      }), \" (\", row.subRows.length, \")\") : cell.isAggregated ? cell.render(\"Aggregated\") : cell.isPlaceholder ? null : cell.render(\"Cell\", {\n        editable: true\n      }));\n    })), row.isExpanded ? __jsx(\"tr\", {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 19\n      }\n    }, __jsx(\"td\", {\n      colSpan: visibleColumns.length,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 21\n      }\n    }, renderRowSubComponent({\n      row: row\n    }))) : null);\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }, \"<<\"), \" \", __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  }, \"<\"), \" \", __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }\n  }, \">\"), \" \", __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }\n  }, \">>\"), \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }\n  }, \"Page\", \" \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), \" \"), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", \" \", __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: \"100px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 11\n    }\n  })), \" \", __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }\n    }, \"Show \", pageSize);\n  }))));\n} // Define a custom filter filter function!\n\n\n_s5(Table, \"CYAvN55eX/TDelxZe6l13Hpo48E=\", false, function () {\n  return [useTable];\n});\n\n_c7 = Table;\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = function (val) {\n  return typeof val !== \"number\";\n}; // This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\n\n\nfunction roundedMedian(leafValues) {\n  var min = leafValues[0] || 0;\n  var max = leafValues[0] || 0;\n  leafValues.forEach(function (value) {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n  return Math.round((min + max) / 2);\n}\n\nvar IndeterminateCheckbox = React.forwardRef(_c8 = _s6(function (_ref9, ref) {\n  _s6();\n\n  var indeterminate = _ref9.indeterminate,\n      rest = _objectWithoutProperties(_ref9, [\"indeterminate\"]);\n\n  var defaultRef = React.useRef();\n  var resolvedRef = ref || defaultRef;\n  React.useEffect(function () {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return __jsx(React.Fragment, null, __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    ref: resolvedRef\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 9\n    }\n  })));\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c9 = IndeterminateCheckbox;\n\nfunction ItemsTable() {\n  _s7();\n\n  var _this4 = this;\n\n  var columns = React.useMemo(function () {\n    return [{\n      Header: \"Tasks\",\n      columns: [{\n        id: \"expander\",\n        Header: function Header(_ref10) {\n          var getToggleAllRowsExpandedProps = _ref10.getToggleAllRowsExpandedProps,\n              isAllRowsExpanded = _ref10.isAllRowsExpanded;\n          return __jsx(\"span\", _extends({}, getToggleAllRowsExpandedProps(), {\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 15\n            }\n          }), isAllRowsExpanded ? \"👇\" : \"👉\");\n        },\n        Cell: function Cell(_ref11) {\n          var row = _ref11.row;\n          return __jsx(\"span\", _extends({}, row.getToggleRowExpandedProps({\n            style: {\n              paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n            }\n          }), {\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }\n          }), row.isExpanded ? \"👇\" : \"👉\");\n        }\n      }, {\n        Header: \"Task\",\n        accessor: \"name\",\n        aggregate: \"count\"\n      }, {\n        Header: \"Date\",\n        accessor: \"created_at\",\n        Filter: SelectColumnFilter,\n        filter: \"includes\"\n      }, {\n        Header: \"Board\",\n        accessor: \"board.name\",\n        aggregate: \"count\"\n      }, {\n        Header: \"Columns\",\n        accessor: \"column_values\",\n        aggregate: \"count\",\n        Cell: function Cell(p) {\n          return __jsx(\"span\", {\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 26\n            }\n          }, p.value.length);\n        }\n      }]\n    }];\n  }, []); // const {data, refetch} = useItemsQuery({});\n  // console.log(data);\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  var skipResetRef = React.useRef(false); // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  var updateMyData = function updateMyData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true;\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, row), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  };\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      data = _React$useState4[0],\n      dataSet = _React$useState4[1];\n\n  var monday = withMonday([]);\n  var items = useItemsQuery({});\n  React.useEffect(function () {\n    items.request({\n      limit: 35\n    });\n  }, []);\n  React.useEffect(function () {\n    console.log(items, \"items.datasss\"); // items.refetch();\n  }, [items]);\n  React.useEffect(function () {\n    if (Array.isArray(items.data)) dataSet(items.data);\n    console.log(items.data, \"items.data\");\n  }, [items.data]); // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n  React.useEffect(function () {\n    skipResetRef.current = false;\n  }, [data]); // Create a function that will render our row sub components\n\n  var renderRowSubComponent = React.useCallback(function (_ref12) {\n    var row = _ref12.row;\n    return __jsx(\"pre\", {\n      style: {\n        fontSize: \"10px\"\n      },\n      __self: _this4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 7\n      }\n    }, __jsx(\"code\", {\n      __self: _this4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }\n    }, JSON.stringify({\n      values: row.values\n    }, null, 2)));\n  }, []);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    skipReset: skipResetRef.current,\n    renderRowSubComponent: renderRowSubComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s7(ItemsTable, \"cWCF9qiQzn2L+umMTUUneUOniaQ=\", false, function () {\n  return [useItemsQuery];\n});\n\n_c10 = ItemsTable;\nexport default ItemsTable;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"DefaultColumnFilter\");\n$RefreshReg$(_c4, \"SelectColumnFilter\");\n$RefreshReg$(_c5, \"SliderColumnFilter\");\n$RefreshReg$(_c6, \"NumberRangeColumnFilter\");\n$RefreshReg$(_c7, \"Table\");\n$RefreshReg$(_c8, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c9, \"IndeterminateCheckbox\");\n$RefreshReg$(_c10, \"ItemsTable\");","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday-ui/src/ItemsTable.jsx"],"names":["React","styled","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useRowSelect","matchSorter","useItemsQuery","withMonday","Atom","Styles","div","EditableCell","initialValue","value","index","row","id","column","updateMyData","editable","useState","setValue","DefaultColumnFilter","filterValue","preFilteredRows","setFilter","count","length","e","target","undefined","SelectColumnFilter","options","useMemo","Set","forEach","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","keys","autoRemove","Table","columns","data","renderRowSubComponent","skipReset","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","autoResetPage","autoResetSelectedRows","disableMultiSort","hooks","visibleColumns","push","groupByBoundary","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","ml","canFilter","console","log","getRowProps","cells","cell","getCellProps","isGrouped","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","Number","filterGreaterThan","roundedMedian","leafValues","round","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","ItemsTable","getToggleAllRowsExpandedProps","isAllRowsExpanded","style","paddingLeft","depth","accessor","aggregate","p","skipResetRef","rowIndex","columnId","setData","dataSet","monday","items","request","limit","Array","isArray","useCallback","fontSize","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { useItemsQuery, withMonday } from \"react-monday\";\n\nimport Atom from \"./Atoms\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-radius: 6px;\n    background: #fff;\n    border-spacing: 0;\n    border: 1px solid black;\n    width: 100%;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th {\n      :nth-of-type(1) {\n        width: 20px;\n      }\n      :nth-of-type(2) {\n        width: 20px;\n      }\n      :nth-of-type(3) {\n        width: 50%;\n      }\n      :nth-of-type(4) {\n        width: 100px;\n      }\n      :nth-of-type(5) {\n        width: 100px;\n      }\n      :nth-of-type(6) {\n        width: 100px;\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    td {\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`;\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData, // This is a custom function that we supplied to our table instance\n  editable,\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  return <span>{value}</span>;\n};\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\",\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\",\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Be sure to pass our updateMyData and the skipReset option\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  renderRowSubComponent,\n  skipReset,\n}) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      // And also our default editable cell\n      // Cell: EditableCell,\n    }),\n    []\n  );\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    visibleColumns,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      autoResetPage: !skipReset,\n      autoResetSelectedRows: !skipReset,\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: \"selection\",\n            groupByBoundary: true,\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ];\n      });\n    }\n  );\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        {/* \n        ------------\n        Table Head \n        ------------\n        */}\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <Atom.Flex alignCenter>\n                    <div>\n                      {/* {column.canGroupBy ? (\n                        // If the column can be grouped, let's add a toggle\n                        <span {...column.getGroupByToggleProps()}>\n                          {column.isGrouped ? '🛑 ' : '👊 '}\n                        </span>\n                      ) : null} */}\n                      <span {...column.getSortByToggleProps()}>\n                        {column.render(\"Header\")}\n                        {/* Add a sort direction indicator */}\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? \" 🔽\"\n                            : \" 🔼\"\n                          : \"\"}\n                      </span>\n                    </div>\n                    <Atom.Box sx={{ ml: 3 }}>\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </Atom.Box>\n                  </Atom.Flex>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        {/* \n        ------------\n        Table Body \n        ------------\n        */}\n        <tbody {...getTableBodyProps()}>\n          {page.map((row) => {\n            prepareRow(row);\n            console.log(row, \"rowrow\");\n            return (\n              <>\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>\n                        {cell.isGrouped ? (\n                          <>\n                            <span {...row.getToggleRowExpandedProps()}>\n                              {row.isExpanded ? \"👇\" : \"👉\"}\n                            </span>{\" \"}\n                            {cell.render(\"Cell\", { editable: false })} (\n                            {row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : (\n                          cell.render(\"Cell\", { editable: true })\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n                {row.isExpanded ? (\n                  <tr>\n                    <td colSpan={visibleColumns.length}>\n                      {renderRowSubComponent({ row })}\n                    </td>\n                  </tr>\n                ) : null}\n              </>\n            );\n          })}\n        </tbody>\n      </table>\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\n// This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n\n  leafValues.forEach((value) => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n\n  return Math.round((min + max) / 2);\n}\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n\nfunction ItemsTable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Tasks\",\n        columns: [\n          {\n            id: \"expander\",\n            Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n              <span {...getToggleAllRowsExpandedProps()}>\n                {isAllRowsExpanded ? \"👇\" : \"👉\"}\n              </span>\n            ),\n            Cell: ({ row }) => (\n              <span\n                {...row.getToggleRowExpandedProps({\n                  style: {\n                    paddingLeft: `${row.depth * 2}rem`,\n                  },\n                })}\n              >\n                {row.isExpanded ? \"👇\" : \"👉\"}\n              </span>\n            ),\n          },\n          {\n            Header: \"Task\",\n            accessor: \"name\",\n            aggregate: \"count\",\n          },\n          {\n            Header: \"Date\",\n            accessor: \"created_at\",\n            Filter: SelectColumnFilter,\n            filter: \"includes\",\n          },\n          {\n            Header: \"Board\",\n            accessor: \"board.name\",\n            aggregate: \"count\",\n          },\n          {\n            Header: \"Columns\",\n            accessor: \"column_values\",\n            aggregate: \"count\",\n            Cell: (p) => <span>{p.value.length}</span>,\n          },\n        ],\n      },\n    ],\n    []\n  );\n\n  // const {data, refetch} = useItemsQuery({});\n\n  // console.log(data);\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  const skipResetRef = React.useRef(false);\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true;\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...row,\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n\n  const [data, dataSet] = React.useState([]);\n  const monday = withMonday([]);\n  const items = useItemsQuery({});\n  React.useEffect(() => {\n    items.request({ limit: 35 });\n  }, []);\n\n  React.useEffect(() => {\n    console.log(items, \"items.datasss\");\n    // items.refetch();\n  }, [items]);\n  React.useEffect(() => {\n    if (Array.isArray(items.data)) dataSet(items.data);\n    console.log(items.data, \"items.data\");\n  }, [items.data]);\n\n  // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    skipResetRef.current = false;\n  }, [data]);\n\n  // Create a function that will render our row sub components\n  const renderRowSubComponent = React.useCallback(\n    ({ row }) => (\n      <pre\n        style={{\n          fontSize: \"10px\",\n        }}\n      >\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    ),\n    []\n  );\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipReset={skipResetRef.current}\n        renderRowSubComponent={renderRowSubComponent}\n      />\n    </Styles>\n  );\n}\n\nexport default ItemsTable;\n"]},"metadata":{},"sourceType":"module"}