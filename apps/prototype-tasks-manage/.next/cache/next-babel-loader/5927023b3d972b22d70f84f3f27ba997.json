{"ast":null,"code":"/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n/* --- Local --- */\n\nimport { boardsQuery } from \"../lib/graphql/queries\";\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\n\nexport const useMondayBoardsQuery = ({\n  limit,\n  page\n}) => {\n  const [parsed, setParsed] = React.useState([]);\n  const {\n    loading,\n    error,\n    data,\n    refetch,\n    subscribeToMore\n  } = useQuery(boardsQuery, {\n    variables: {\n      limit: 10,\n      page\n    }\n  });\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch\n  };\n};\nexport default useMondayBoardsQuery;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday/src/hooks/useMondayBoardsQuery.js"],"names":["React","useQuery","boardsQuery","useMondayBoardsQuery","limit","page","parsed","setParsed","useState","loading","error","data","refetch","subscribeToMore","variables"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA;;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA;;;;;;;AAMA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqB;AACvD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAAqDZ,QAAQ,CACjEC,WADiE,EAEjE;AACEY,IAAAA,SAAS,EAAE;AACTV,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA;AAFS;AADb,GAFiE,CAAnE;AAUA,SAAO;AACLM,IAAAA,IADK;AAELL,IAAAA,MAFK;AAGLG,IAAAA,OAHK;AAILC,IAAAA,KAJK;AAKLE,IAAAA;AALK,GAAP;AAOD,CAnBM;AAqBP,eAAeT,oBAAf","sourcesContent":["/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n\n/* --- Local --- */\nimport { boardsQuery } from \"../lib/graphql/queries\";\n\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\nexport const useMondayBoardsQuery = ({ limit, page }) => {\n  const [parsed, setParsed] = React.useState([]);\n  const { loading, error, data, refetch, subscribeToMore } = useQuery(\n    boardsQuery,\n    {\n      variables: {\n        limit: 10,\n        page,\n      },\n    }\n  );\n\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch,\n  };\n};\n\nexport default useMondayBoardsQuery;\n"]},"metadata":{},"sourceType":"module"}