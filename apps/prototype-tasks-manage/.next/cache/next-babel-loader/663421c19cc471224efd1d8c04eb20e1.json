{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n/* --- Local --- */\n\nimport { BOARDS_QUERY } from \"../lib/graphql/queries\";\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\n\nexport var useMondayBoardsQuery = function useMondayBoardsQuery(_ref) {\n  _s();\n\n  var limit = _ref.limit,\n      page = _ref.page;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      parsed = _React$useState2[0],\n      setParsed = _React$useState2[1];\n\n  var _useQuery = useQuery(boardsQuery, {\n    variables: {\n      limit: 10,\n      page: page\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch,\n      subscribeToMore = _useQuery.subscribeToMore;\n\n  return {\n    data: data,\n    parsed: parsed,\n    loading: loading,\n    error: error,\n    refetch: refetch\n  };\n};\n\n_s(useMondayBoardsQuery, \"UbJowrzU4UGiBHhvBLu7G/SRD48=\", false, function () {\n  return [useQuery];\n});\n\nexport default useMondayBoardsQuery;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday/src/hooks/useMondayBoardsQuery.js"],"names":["React","useQuery","BOARDS_QUERY","useMondayBoardsQuery","limit","page","useState","parsed","setParsed","boardsQuery","variables","loading","error","data","refetch","subscribeToMore"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA;;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA;;;;;;;AAMA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAqB;AAAA;;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,wBAC3BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAD2B;AAAA;AAAA,MAChDC,MADgD;AAAA,MACxCC,SADwC;;AAAA,kBAEIP,QAAQ,CACjEQ,WADiE,EAEjE;AACEC,IAAAA,SAAS,EAAE;AACTN,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,IAAI,EAAJA;AAFS;AADb,GAFiE,CAFZ;AAAA,MAE/CM,OAF+C,aAE/CA,OAF+C;AAAA,MAEtCC,KAFsC,aAEtCA,KAFsC;AAAA,MAE/BC,IAF+B,aAE/BA,IAF+B;AAAA,MAEzBC,OAFyB,aAEzBA,OAFyB;AAAA,MAEhBC,eAFgB,aAEhBA,eAFgB;;AAYvD,SAAO;AACLF,IAAAA,IAAI,EAAJA,IADK;AAELN,IAAAA,MAAM,EAANA,MAFK;AAGLI,IAAAA,OAAO,EAAPA,OAHK;AAILC,IAAAA,KAAK,EAALA,KAJK;AAKLE,IAAAA,OAAO,EAAPA;AALK,GAAP;AAOD,CAnBM;;GAAMX,oB;UAEgDF,Q;;;AAmB7D,eAAeE,oBAAf","sourcesContent":["/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n\n/* --- Local --- */\nimport { BOARDS_QUERY } from \"../lib/graphql/queries\";\n\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\nexport const useMondayBoardsQuery = ({ limit, page }) => {\n  const [parsed, setParsed] = React.useState([]);\n  const { loading, error, data, refetch, subscribeToMore } = useQuery(\n    boardsQuery,\n    {\n      variables: {\n        limit: 10,\n        page,\n      },\n    }\n  );\n\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch,\n  };\n};\n\nexport default useMondayBoardsQuery;\n"]},"metadata":{},"sourceType":"module"}