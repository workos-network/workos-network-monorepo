{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n/* --- Local --- */\n\nimport { boardsQuery } from \"../lib/graphql/queries\";\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\n\nexport var useMondayBoardsQuery = function useMondayBoardsQuery(_ref) {\n  _s();\n\n  var limit = _ref.limit,\n      page = _ref.page;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      parsed = _React$useState2[0],\n      setParsed = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      subscription = _React$useState4[0],\n      setSubscription = _React$useState4[1];\n\n  var _useQuery = useQuery(boardsQuery, {\n    variables: {\n      limit: 10,\n      page: page\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch,\n      subscribeToMore = _useQuery.subscribeToMore;\n\n  var concat = function concat(list, input) {\n    return list.concat(input);\n  };\n\n  React.useEffect(function () {\n    if (subscription) {\n      setSubscription(undefined);\n      setParsed(concat(parsed, subscription));\n    }\n  }, [subscription]);\n  return {\n    data: data,\n    parsed: parsed,\n    loading: loading,\n    error: error,\n    refetch: refetch\n  };\n};\n\n_s(useMondayBoardsQuery, \"uOO5OMFtTsBO8LRWauBW6K47F4o=\", false, function () {\n  return [useQuery];\n});\n\nexport default useMondayBoardsQuery;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday/src/hooks/useMondayBoardsQuery.js"],"names":["React","useQuery","boardsQuery","useMondayBoardsQuery","limit","page","useState","parsed","setParsed","subscription","setSubscription","variables","loading","error","data","refetch","subscribeToMore","concat","list","input","useEffect","undefined"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA;;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA;;;;;;;AAMA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAqB;AAAA;;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,wBAC3BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAD2B;AAAA;AAAA,MAChDC,MADgD;AAAA,MACxCC,SADwC;;AAAA,yBAEfR,KAAK,CAACM,QAAN,EAFe;AAAA;AAAA,MAEhDG,YAFgD;AAAA,MAElCC,eAFkC;;AAAA,kBAGIT,QAAQ,CACjEC,WADiE,EAEjE;AACES,IAAAA,SAAS,EAAE;AACTP,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,IAAI,EAAJA;AAFS;AADb,GAFiE,CAHZ;AAAA,MAG/CO,OAH+C,aAG/CA,OAH+C;AAAA,MAGtCC,KAHsC,aAGtCA,KAHsC;AAAA,MAG/BC,IAH+B,aAG/BA,IAH+B;AAAA,MAGzBC,OAHyB,aAGzBA,OAHyB;AAAA,MAGhBC,eAHgB,aAGhBA,eAHgB;;AAavD,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAC9B,WAAOD,IAAI,CAACD,MAAL,CAAYE,KAAZ,CAAP;AACD,GAFD;;AAGAnB,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AACpB,QAAIX,YAAJ,EAAkB;AAChBC,MAAAA,eAAe,CAACW,SAAD,CAAf;AACAb,MAAAA,SAAS,CAACS,MAAM,CAACV,MAAD,EAASE,YAAT,CAAP,CAAT;AACD;AACF,GALD,EAKG,CAACA,YAAD,CALH;AAOA,SAAO;AACLK,IAAAA,IAAI,EAAJA,IADK;AAELP,IAAAA,MAAM,EAANA,MAFK;AAGLK,IAAAA,OAAO,EAAPA,OAHK;AAILC,IAAAA,KAAK,EAALA,KAJK;AAKLE,IAAAA,OAAO,EAAPA;AALK,GAAP;AAOD,CA9BM;;GAAMZ,oB;UAGgDF,Q;;;AA6B7D,eAAeE,oBAAf","sourcesContent":["/* --- Global --- */\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n\n/* --- Local --- */\nimport { boardsQuery } from \"../lib/graphql/queries\";\n\n/**\n * @name useMondayBoardsQuery\n * @param {Object} filters\n * @param {Integer} limit\n * @param {Function} children\n */\nexport const useMondayBoardsQuery = ({ limit, page }) => {\n  const [parsed, setParsed] = React.useState([]);\n  const [subscription, setSubscription] = React.useState();\n  const { loading, error, data, refetch, subscribeToMore } = useQuery(\n    boardsQuery,\n    {\n      variables: {\n        limit: 10,\n        page,\n      },\n    }\n  );\n\n  const concat = (list, input) => {\n    return list.concat(input);\n  };\n  React.useEffect(() => {\n    if (subscription) {\n      setSubscription(undefined);\n      setParsed(concat(parsed, subscription));\n    }\n  }, [subscription]);\n\n  return {\n    data,\n    parsed,\n    loading,\n    error,\n    refetch,\n  };\n};\n\nexport default useMondayBoardsQuery;\n"]},"metadata":{},"sourceType":"module"}