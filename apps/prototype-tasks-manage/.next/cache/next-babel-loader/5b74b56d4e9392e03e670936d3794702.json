{"ast":null,"code":"import { ITEMS_QUERY } from \"../lib/graphql\";\nimport { ITEMS_QUERY_REQUEST } from \"../lib/types\";\nexport const itemsQuery = (state, dispatch) => async ({\n  limit,\n  page\n}) => {\n  if (state.isClientAuthorized) {\n    try {\n      dispatch({\n        type: ITEMS_QUERY_REQUEST\n      });\n      const {\n        data,\n        error\n      } = await client.request({\n        query: ITEMS_QUERY,\n        variables: {\n          limit,\n          page\n        }\n      });\n      if (data && data.items) return {\n        data: data.items,\n        error\n      };\n      return {\n        data,\n        error\n      };\n    } catch (error) {}\n  }\n\n  return {\n    data: [],\n    error: \"Unauthorized\"\n  };\n};","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/esence/workos-network-monorepo/node_modules/react-monday/src/actions/itemsQuery.js"],"names":["ITEMS_QUERY","ITEMS_QUERY_REQUEST","itemsQuery","state","dispatch","limit","page","isClientAuthorized","type","data","error","client","request","query","variables","items"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,cAApC;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAP,KAA2B;AACxE,MAAIH,KAAK,CAACI,kBAAV,EAA8B;AAC5B,QAAI;AACFH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP;AADC,OAAD,CAAR;AAGA,YAAM;AAAEQ,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkB,MAAMC,MAAM,CAACC,OAAP,CAAe;AAC3CC,QAAAA,KAAK,EAAEb,WADoC;AAE3Cc,QAAAA,SAAS,EAAE;AAAET,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAFgC,OAAf,CAA9B;AAIA,UAAIG,IAAI,IAAIA,IAAI,CAACM,KAAjB,EAAwB,OAAO;AAAEN,QAAAA,IAAI,EAAEA,IAAI,CAACM,KAAb;AAAoBL,QAAAA;AAApB,OAAP;AACxB,aAAO;AAAED,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAP;AACD,KAVD,CAUE,OAAOA,KAAP,EAAc,CAAE;AACnB;;AACD,SAAO;AACLD,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,KAAK,EAAE;AAFF,GAAP;AAID,CAlBM","sourcesContent":["import { ITEMS_QUERY } from \"../lib/graphql\";\nimport { ITEMS_QUERY_REQUEST } from \"../lib/types\";\n\nexport const itemsQuery = (state, dispatch) => async ({ limit, page }) => {\n  if (state.isClientAuthorized) {\n    try {\n      dispatch({\n        type: ITEMS_QUERY_REQUEST\n      });\n      const { data, error } = await client.request({\n        query: ITEMS_QUERY,\n        variables: { limit, page }\n      });\n      if (data && data.items) return { data: data.items, error };\n      return { data, error };\n    } catch (error) {}\n  }\n  return {\n    data: [],\n    error: \"Unauthorized\"\n  };\n};\n"]},"metadata":{},"sourceType":"module"}