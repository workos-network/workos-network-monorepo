{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* --- Global --- */\nimport React, { useContext, useReducer, useEffect, useState } from \"react\";\nimport { GraphQLClient, ClientContext } from \"graphql-hooks\";\n/* --- Local --- */\n\nimport * as actionList from \"./actions\";\nimport Context from \"./Context\";\nimport reducer from \"./lib/reducer\";\nimport { enhanceActions } from \"./lib/middleware\";\nimport { AUTHORIZE_CLIENT, ENABLE_DEV_MODE, CONNECT_CLIENT } from \"./lib/types\";\nconst API_MONDAY = \"https://api.monday.com/v2/\";\nconst initialState = {\n  isClientAuthorized: false,\n  isDevMode: false,\n  url: API_MONDAY,\n  client: new GraphQLClient({\n    url: API_MONDAY\n  }),\n  token: undefined\n};\n/**\n * @function Provider\n * @param {Array<React.Component>} children\n * @param {String} url\n * @param {String} token\n */\n\nconst Provider = ({\n  children,\n  url,\n  token,\n  devMode\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  React.useEffect(() => {\n    if (devMode) {\n      dispatch({\n        type: ENABLE_DEV_MODE\n      });\n    }\n\n    if (!url && token) {\n      dispatch({\n        type: AUTHORIZE_CLIENT,\n        payload: {\n          token\n        }\n      });\n    }\n\n    if (url && token) {\n      dispatch({\n        type: CONNECT_CLIENT,\n        payload: {\n          url,\n          token\n        }\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    if (state.token) {\n      dispatch({\n        type: AUTHORIZE_CLIENT,\n        payload: {\n          token\n        }\n      });\n    }\n  }, [state.token]);\n  React.useMemo(async () => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      dispatch({\n        type: AUTHORIZE_CLIENT,\n        payload: {\n          token\n        }\n      });\n    }\n  }, [state.isDevMode]);\n  const {\n    isClientAuthorized\n  } = state;\n  const actions = enhanceActions(actionList, state, dispatch);\n  console.log(actions, \"actionsactions\");\n  React.useEffect(() => {\n    console.log(state, \"monday state\");\n  }, [state]);\n  return __jsx(ClientContext.Provider, {\n    value: state.client\n  }, __jsx(Context.Provider, {\n    value: _objectSpread(_objectSpread({\n      love: true\n    }, actions), state)\n  }, children));\n};\n\nexport default Provider;","map":null,"metadata":{},"sourceType":"module"}